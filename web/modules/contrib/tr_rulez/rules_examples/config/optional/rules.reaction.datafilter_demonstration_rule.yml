langcode: en
status: false
dependencies:
  module:
    - tr_rulez
  enforced:
    module:
      - tr_rulez
id: datafilter_demonstration_rule
label: 'DataFilter demonstration rule'
events:
  -
    event_name: 'rules_entity_insert:node'
    description: 'Rule to demonstrate how to use the data filters defined in Rules and D8 Rules Essentials modules. To trigger this example, create a new node with a title that contains the word "Test" (with a capital T) and has whitespace before and after the title. This rule is documented at https://www.drupal.org/docs/8/modules/d8-rules-essentials/examples/use-datafilters-to-process-token-values'
tags:
  - rules_examples
config_version: '3'
expression:
  id: rules_rule
  uuid: 71eb9496-664c-4a61-9c1c-63cf115dab09
  conditions:
    id: rules_and
    uuid: 9bf90a57-f14b-497f-8fa6-0bc00fce7dc6
    conditions: {  }
  actions:
    id: rules_action_set
    uuid: 57773f7c-7ef0-4535-a869-672731268038
    actions:
      -
        id: rules_action
        uuid: ca3f2f88-7a42-42fb-aa59-54213a0353ef
        context_values:
          message: 'CountFilter: Count number of characters in a string. Title = {{ node.title.value }}, Count = {{ node.title.value | count }}'
          type: status
          repeat: false
        context_mapping: {  }
        context_processors:
          message:
            rules_tokens: {  }
          type:
            rules_tokens: {  }
          repeat:
            rules_tokens: {  }
        provides_mapping: {  }
        action_id: rules_system_message
      -
        id: rules_action
        uuid: 59dc955b-61c8-45b6-aefc-408d87de3486
        context_values:
          message: 'LinkFilter: Turn a URL into an HTML anchor tag. URL = {{ node | entity_url }}, Link = {{ node | entity_url | link(''Node'') }}'
          type: status
          repeat: false
        context_mapping: {  }
        context_processors:
          message:
            rules_tokens: {  }
          type:
            rules_tokens: {  }
          repeat:
            rules_tokens: {  }
        provides_mapping: {  }
        action_id: rules_system_message
      -
        id: rules_action
        uuid: d83320eb-176a-4969-8e4b-bc61756d3b74
        context_values:
          message: 'LowerFilter: Change node title to lowercase. Title = {{ node.title.value }}, Lowercase Title = {{ node.title.value | lower }}'
          type: status
          repeat: false
        context_mapping: {  }
        context_processors:
          message:
            rules_tokens: {  }
          type:
            rules_tokens: {  }
          repeat:
            rules_tokens: {  }
        provides_mapping: {  }
        action_id: rules_system_message
      -
        id: rules_action
        uuid: 4d9bdd4a-398f-4c4e-b346-86ada9433760
        context_values:
          message: 'ReplaceFilter = {{ node.title.value | replace(''Test'', ''Replacement text'') }}'
          type: status
          repeat: false
        context_mapping: {  }
        context_processors:
          message:
            rules_tokens: {  }
          type:
            rules_tokens: {  }
          repeat:
            rules_tokens: {  }
        provides_mapping: {  }
        action_id: rules_system_message
      -
        id: rules_action
        uuid: 908dafaf-6741-4a1a-a18e-26ebc6e495ba
        context_values:
          message: 'TrimFilter: Remove whitespace. Title = "{{ node.title.value }}", Trimmed = "{{ node.title.value | trim }}"'
          type: status
          repeat: false
        context_mapping: {  }
        context_processors:
          message:
            rules_tokens: {  }
          type:
            rules_tokens: {  }
          repeat:
            rules_tokens: {  }
        provides_mapping: {  }
        action_id: rules_system_message
      -
        id: rules_action
        uuid: d83320eb-176a-4969-8e4b-bc61756d3b74
        context_values:
          message: 'UpperFilter: Change node title to uppercase. Title = {{ node.title.value }}, Uppercase Title = {{ node.title.value | upper }}'
          type: status
          repeat: false
        context_mapping: {  }
        context_processors:
          message:
            rules_tokens: {  }
          type:
            rules_tokens: {  }
          repeat:
            rules_tokens: {  }
        provides_mapping: {  }
        action_id: rules_system_message
